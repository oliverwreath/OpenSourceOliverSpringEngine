
#1 Quick PoC - Enabling H2 Console
#spring.h2.console.enabled=true
#
#spring.datasource.url=jdbc:h2:mem:testdb
#spring.datasource.driverClassName=org.h2.Driver
#spring.datasource.username=sa
#spring.datasource.password=sa
#
#spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

# IDENTITY (ContextIdApplicationContextInitializer)
spring.application.name=OliverSpringEngine AI Boosting

# EMBEDDED SERVER CONFIGURATION (ServerProperties)
server.tomcat.uri-encoding=UTF-8

# HTTP (HttpProperties)
# Charset of HTTP requests and responses. Added to the "Content-Type" header if not set explicitly.
spring.http.encoding.charset=UTF-8
# Enable http encoding support.
spring.http.encoding.enabled=true
# Force the encoding to the configured charset on HTTP requests and responses.
spring.http.encoding.force=true

# DATASOURCE (DataSourceAutoConfiguration & DataSourceProperties)
spring.datasource.hikari.autoCommit=false
spring.datasource.hikari.data-source-properties.useUnicode=true
spring.datasource.hikari.data-source-properties.characterEncoding=UTF-8

# JPA (JpaBaseConfiguration, HibernateJpaAutoConfiguration)
spring.jpa.open-in-view=true
# (none| validate| update| create| create-drop) None for production. Version control your script and review then run.
#spring.jpa.hibernate.ddl-auto=none
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL57Dialect
spring.jpa.properties.hibernate.dialect.storage_engine=innodb
spring.jpa.properties.hibernate.connection.CharSet=utf8mb4
spring.jpa.properties.hibernate.connection.characterEncoding=utf8
# tells Hibernate to convert to UTC to store
spring.jpa.properties.hibernate.jdbc.time_zone=UTC
spring.jpa.properties.hibernate.connection.provider_disables_autocommit=true
spring.jpa.properties.hibernate.globally_quoted_identifiers=true
#spring.jpa.properties.hibernate.globally_quoted_identifiers_skip_column_definitions=false
#Unfortunately, right now, it works backwards (see this bug): so if you want to skip column definition you have to set it to false.

# JPA Hibernate Cache - L2C + query cache
spring.jpa.properties.hibernate.cache.use_second_level_cache=true
spring.jpa.properties.hibernate.cache.use_query_cache=true
spring.jpa.properties.hibernate.cache.region.factory_class=jcache
spring.jpa.properties.hibernate.cache.default_cache_concurrency_strategy=read-write
spring.jpa.properties.hibernate.javax.cache.provider = org.ehcache.jsr107.EhcacheCachingProvider
#spring.jpa.properties.hibernate.javax.cache.uri=ehcache3.xml
spring.jpa.properties.hibernate.javax.cache.missing_cache_strategy=create
spring.jpa.properties.javax.persistence.sharedCache.mode=ALL
# JPA Hibernate Cache - query plan
spring.jpa.properties.hibernate.query.plan_cache_max_size=2048
spring.jpa.properties.hibernate.query.plan_parameter_metadata_max_size=128
spring.jpa.properties.hibernate.create_empty_composites.enabled=true

# THYMELEAF (ThymeleafAutoConfiguration)
spring.thymeleaf.check-template=true
spring.thymeleaf.check-template-location=true
spring.thymeleaf.enabled=true
spring.thymeleaf.encoding=UTF-8
spring.thymeleaf.mode=HTML
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html

# Custom - Authentication queries
oliver.queries.users-query=SELECT user_email, password, enabled FROM users where user_email = ?
oliver.queries.roles-query=SELECT t2.user_email, t1.authority FROM authorities as t1 join users as t2 on t1.user_id = t2.id where t2.user_email = ?

spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=YOUR_USER_NAME@gmail.com
spring.mail.password=YOUR_PASS
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.from=YOUR_USER_NAME@gmail.com
